GETTER
	Hay algun control sobre el tamanyo de los value en t_envl?
	Por ejemplo el path deberia ser como maximo 1024  => MAX_PATH en nuestras macros

EXPANDER

    $$ -> PID
    $var
    $(var)
    $((var or expresion))
        cómo interpreta los caracteres dentro de una expresión
            son tratados como integres que se convierten a cero?
            son tratados como un is_digit?
    NOTA:
    En caso de que no se cierra una comilla esa línea completa queda excluida del parser

    EXPANDIR $$
        ESTE COMANDO EN UNA FUNCIÓN PODRÍA OBTENER EL PID EN UN FILE SIN TENER LA FUNCION getpid() QUE NO ESTA PERMITIDA
        ps aux | grep minishell | awk '{print $2}' | head -n 1 > FILE
        DESPUES ABRIR EL FILE Y OBTENER EL STRING
        IMPRIMIRLO
        BORRAR EL FILE CON rm FILE
    ${variable:-valor_por_defecto}
    ${variable:+valor_por_defecto}

    ~:dir del usuario /home
    $*:todos los parámetros ?? QUE ES ESTO
    $2:segundo parámetro ?? QUE ES ESTO
    $0:nombre del script ?? QUE ES ESTO
    $?:código de salida OK
    $/:número de parámetros ?? QUE ES ESTO
    $!:pid del último trabajo en segundo plano ?? QUE ES ESTO

    $((expresión)) - NOT HADLED
    $[expresión] - NOT HANDLED
    + - / * % , < <= > >= == != , && || !
    :precedencia de operadores, paréntesis para alterar la precedencia
    :variables dentro de la expresión
    :funciones matemáticas dentro de la expresión

    ${variables/espresión/reemplazo}
    *:cualquier string
    ?:cualquier char



    ENV
VIGILAR EL SHELL LEVEL
	void	ft_shlvl(t_env **env, t_env *temp, int shlvl, char *str)
{
	temp = *env;
	while (temp)
	{
		if (ft_strncmp(temp->key, "SHLVL", 5) == 0)
		{
			shlvl = ft_atoi(temp->value);
			if (shlvl > 999)
			{
				str = ft_itoa(shlvl + 1);
				ft_putstr_fd("minishell: warning: shell level (", 2);
				ft_putstr_fd(str, 2);
				ft_putstr_fd(") too high, resetting to 1\n", 2);
				shlvl = 0;
				free(str);
			}
			if (shlvl < 0)
				shlvl = -1;
			shlvl++;
			free(temp->value);
			temp->value = ft_itoa(shlvl);
			break ;
		}
		temp = temp->next;
	}
}

-----

Cuando se exporta $NADA=algo
debería dar que =algo no es bueno,
pero está tomando como export sin argumentos
$NADA == '\n' hay que mirarlo con que no tenga nada después, porque si lo tiene hay que redirigir a error con argumento => &comando[1]



en errors_start se puede poner validacione s de syntax
1.  pipe al inicio
2.  pipe al final
3.  quotes sin cerrar simples o dobles


-->> 
error

Minishell > echo "hola que tal
- - - - - - - - - - -
LEXER -> debug start
token 1         | str -> echo "hola que tal             | type -> 9
----------------------------------------------------
token 2         | str -> (null)         | type -> 0
----------------------------------------------------
LEXER -> debug done
- - - - - - - - - -
Minishell: syntax error near unexpected token `Open Quotes'
Minishell > echo ' hola " que tal '
- - - - - - - - - - -
LEXER -> debug start
token 1         | str -> echo ' hola " que tal '                | type -> 9
----------------------------------------------------
token 2         | str -> (null)         | type -> 0
----------------------------------------------------
LEXER -> debug done
- - - - - - - - - -
hola " que tal
Minishell > echo hola "que tal ' "
- - - - - - - - - - -
LEXER -> debug start
token 1         | str -> echo hola "que tal ' "         | type -> 9
----------------------------------------------------
token 2         | str -> (null)         | type -> 0
----------------------------------------------------
LEXER -> debug done
- - - - - - - - - -
=================================================================
==12707==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000054a2 at pc 0x5635ff7f8965 bp 0x7fffe89a2ec0 sp 0x7fffe89a2eb0
READ of size 1 at 0x6020000054a2 thread T0
    #0 0x5635ff7f8964 in str_close_quote src/utils_str.c:19
    #1 0x5635ff7f1f59 in expander_get_expansion src/expander.c:32
    #2 0x5635ff7f296d in expander src/expander.c:86
    #3 0x5635ff7e7369 in main src/_minishell.c:33
    #4 0x7f3dabe3fd8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58
    #5 0x7f3dabe3fe3f in __libc_start_main_impl ../csu/libc-start.c:392
    #6 0x5635ff7e7104 in _start (/home/mvisca/code/42/08-minishell/minishell+0x17104)

0x6020000054a2 is located 5 bytes to the right of 13-byte region [0x602000005490,0x60200000549d)
allocated by thread T0 here:
    #0 0x7f3dac178887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145
    #1 0x5635ff7fb0ed in ft_substr (/home/mvisca/code/42/08-minishell/minishell+0x2b0ed)
    #2 0x5635ff7f68b8 in parser_do_split src/parser_split.c:67
    #3 0x5635ff7f6b3e in parser_split src/parser_split.c:92
    #4 0x5635ff7f56f5 in p_pop_comm src/parser.c:76
    #5 0x5635ff7f5ca3 in parser src/parser.c:113
    #6 0x5635ff7e7356 in main src/_minishell.c:31
    #7 0x7f3dabe3fd8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: heap-buffer-overflow src/utils_str.c:19 in str_close_quote
Shadow bytes around the buggy address:
  0x0c047fff8a40: fa fa fd fa fa fa fd fd fa fa fd fa fa fa 00 05
  0x0c047fff8a50: fa fa 00 05 fa fa 00 fa fa fa 00 fa fa fa fd fa
  0x0c047fff8a60: fa fa fd fa fa fa 00 04 fa fa fd fd fa fa fd fa
  0x0c047fff8a70: fa fa fd fd fa fa fd fa fa fa fd fd fa fa fd fa
  0x0c047fff8a80: fa fa fd fd fa fa fd fa fa fa fd fa fa fa fd fa
=>0x0c047fff8a90: fa fa 00 05[fa]fa fd fa fa fa fd fd fa fa fd fa
  0x0c047fff8aa0: fa fa 00 fa fa fa fd fd fa fa fd fd fa fa fd fd
  0x0c047fff8ab0: fa fa fd fa fa fa 00 07 fa fa fd fa fa fa fd fd
  0x0c047fff8ac0: fa fa 00 07 fa fa fd fa fa fa fd fa fa fa 00 05
  0x0c047fff8ad0: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd
  0x0c047fff8ae0: fa fa fd fa fa fa fd fa fa fa fd fd fa fa fd fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==12707==ABORTING